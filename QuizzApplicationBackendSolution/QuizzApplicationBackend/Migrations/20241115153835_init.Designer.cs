// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizzApplicationBackend.Context;

#nullable disable

namespace QuizzApplicationBackend.Migrations
{
    [DbContext(typeof(QuizContext))]
    [Migration("20241115153835_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QuizzApplicationBackend.Models.LeaderBoard", b =>
                {
                    b.Property<int>("LeaderBoardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LeaderBoardId"), 1L, 1);

                    b.Property<int>("Categories")
                        .HasColumnType("int");

                    b.Property<string>("LeaderBoardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("LeaderBoardId");

                    b.HasIndex("QuizId")
                        .IsUnique();

                    b.ToTable("LeaderBoards");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Option", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"), 1L, 1);

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OptionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Query", b =>
                {
                    b.Property<int>("QueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueryId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit");

                    b.Property<string>("QueryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReportedBy")
                        .HasColumnType("int");

                    b.HasKey("QueryId");

                    b.HasIndex("ReportedBy");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"), 1L, 1);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("QuestionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Quiz", b =>
                {
                    b.Property<int>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizId"), 1L, 1);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CreatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<int>("MaxPoint")
                        .HasColumnType("int");

                    b.Property<int>("NoOfQuestions")
                        .HasColumnType("int");

                    b.Property<int?>("QuizScoreCardNo")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isEnded")
                        .HasColumnType("bit");

                    b.HasKey("QuizId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("QuizScoreCardNo");

                    b.ToTable("Quizes");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.QuizScorecard", b =>
                {
                    b.Property<int>("QuizScoreCardNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuizScoreCardNo"), 1L, 1);

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreCardId")
                        .HasColumnType("int");

                    b.HasKey("QuizScoreCardNo");

                    b.ToTable("QuizScores");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.ScoreCard", b =>
                {
                    b.Property<int>("ScoreCardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ScoreCardId"), 1L, 1);

                    b.Property<double>("Acuuracy")
                        .HasColumnType("float");

                    b.Property<int?>("LeaderBoardId")
                        .HasColumnType("int");

                    b.Property<int>("QuizId")
                        .HasColumnType("int");

                    b.Property<int?>("QuizScoreCardNo")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ScoreCardId");

                    b.HasIndex("LeaderBoardId");

                    b.HasIndex("QuizId");

                    b.HasIndex("QuizScoreCardNo");

                    b.HasIndex("UserId");

                    b.ToTable("ScoreCards");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("HashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.LeaderBoard", b =>
                {
                    b.HasOne("QuizzApplicationBackend.Models.Quiz", "Quiz")
                        .WithOne("LeaderBoard")
                        .HasForeignKey("QuizzApplicationBackend.Models.LeaderBoard", "QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Option", b =>
                {
                    b.HasOne("QuizzApplicationBackend.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Question_option");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Query", b =>
                {
                    b.HasOne("QuizzApplicationBackend.Models.User", "User")
                        .WithMany("Queries")
                        .HasForeignKey("ReportedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Query_Report");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Question", b =>
                {
                    b.HasOne("QuizzApplicationBackend.Models.Quiz", null)
                        .WithMany("Questions")
                        .HasForeignKey("QuizId");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Quiz", b =>
                {
                    b.HasOne("QuizzApplicationBackend.Models.User", "User")
                        .WithMany("Quiz")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Quiz_creator");

                    b.HasOne("QuizzApplicationBackend.Models.QuizScorecard", null)
                        .WithMany("Quizes")
                        .HasForeignKey("QuizScoreCardNo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.ScoreCard", b =>
                {
                    b.HasOne("QuizzApplicationBackend.Models.LeaderBoard", null)
                        .WithMany("ScoreCard")
                        .HasForeignKey("LeaderBoardId");

                    b.HasOne("QuizzApplicationBackend.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizzApplicationBackend.Models.QuizScorecard", null)
                        .WithMany("ScoreCards")
                        .HasForeignKey("QuizScoreCardNo");

                    b.HasOne("QuizzApplicationBackend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.LeaderBoard", b =>
                {
                    b.Navigation("ScoreCard");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Question", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.Quiz", b =>
                {
                    b.Navigation("LeaderBoard")
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.QuizScorecard", b =>
                {
                    b.Navigation("Quizes");

                    b.Navigation("ScoreCards");
                });

            modelBuilder.Entity("QuizzApplicationBackend.Models.User", b =>
                {
                    b.Navigation("Queries");

                    b.Navigation("Quiz");
                });
#pragma warning restore 612, 618
        }
    }
}
